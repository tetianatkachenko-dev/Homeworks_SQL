CREATE DATABASE homework_2;
USE homework_2;

CREATE TABLE products(
	product_id INT PRIMARY KEY AUTO_INCREMENT, 
	name VARCHAR(255) NOT NULL, 
    description TEXT, 
    price DECIMAL(10, 2) NOT NULL, 
    stock_quantity INT, 
    category_id INT
);

CREATE TABLE customers(
	customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL, 
    last_name VARCHAR(100) NOT NULL, 
    email VARCHAR(255) UNIQUE NOT NULL, 
    phone VARCHAR(50), 
    address VARCHAR(255), 
    city VARCHAR(100)
);

CREATE TABLE orders( 
	order_id INT PRIMARY KEY AUTO_INCREMENT, 
    customer_id INT NOT NULL, 
    order_date DATETIME, 
    total_amount DECIMAL(10, 2) NOT NULL, 
    payment_method VARCHAR(100), 
	FOREIGN KEY (customer_id) REFERENCES customers(customer_id) );

-- I forgot to add this column when I created the table orders. Then I realized that it needed to have 2 JOINs in a query. So I added it by using alter table.

ALTER TABLE orders
ADD COLUMN product_id INT;

-- Next code is for cheking number of inserted rows by python code.
SELECT COUNT(*) AS total_products
FROM products;

SELECT COUNT(*) AS total_customers
FROM customers;

SELECT *
FROM orders;

-- AI query to see customers that ordered some products for amount bigger than 100 dollars.
SELECT
    c.first_name,
    c.last_name,
    o.order_id,
    o.order_date,
    o.total_amount,
    o.payment_method,
    p.name AS product_name,
    p.price AS product_price
FROM orders o
JOIN customers c
    ON o.customer_id = c.customer_id
JOIN products p
    ON o.product_id = p.product_id
WHERE o.total_amount > 100
ORDER BY o.order_date;

DROP INDEX idx_orders_covering ON orders;

CREATE INDEX idx_orders_covering ON orders(total_amount, customer_id, product_id, order_date);

-- Optimized query with usage of CTE, indexes and a bit rewrited.
WITH filtered_orders AS (
    SELECT order_id, customer_id, product_id, order_date, total_amount, payment_method
    FROM orders USE INDEX (idx_orders_covering)
    WHERE total_amount > 100
)
SELECT
    c.first_name,
    c.last_name,
    f.order_id,
    f.order_date,
    f.total_amount,
    f.payment_method,
    p.name AS product_name,
    p.price AS product_price
FROM filtered_orders f
JOIN customers c 
    ON f.customer_id = c.customer_id
JOIN products p
    ON f.product_id = p.product_id
ORDER BY f.order_date;

-- As we can see from EXPLAIN and EXPLAIN ANALYZE functions - optimized query works faster and use indexes during its work while non-optimized scan full table.

-- Python code generated by AI to insert data in tables

import subprocess
import sys

# --- –°–ø–∏—Å–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ ---
required_packages = [
    "mysql-connector-python",
    "Faker"
]


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ---
def install(package):
    try:
        __import__(package)
    except ImportError:
        print(f"Installing {package}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    else:
        print(f"{package} already installed.")

# --- –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –ø–∞–∫–µ—Ç–∏ ---
for pkg in required_packages:
    # –î–ª—è mysql-connector-python —ñ–º–ø–æ—Ä—Ç–∏—Ç—å—Å—è —è–∫ mysql.connector
    import_name = "mysql.connector" if pkg == "mysql-connector-python" else pkg
    try:
        __import__(import_name)
        print(f"{pkg} already installed.")
    except ImportError:
        print(f"Installing {pkg}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])

print("‚úÖ All required modules are installed!")

# --- –¢—É—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ç–≤—ñ–π –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ ---
import mysql.connector
from faker import Faker
import random
from datetime import datetime, timedelta

print("Modules ready! You can start your script.")


# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL ---
connection = mysql.connector.connect(
    host="localhost",
    user="root",          # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –ª–æ–≥—ñ–Ω
    password="!TTkachKSE2508!",  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å
    database="homework_2"    # –Ω–∞–∑–≤–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
)

cursor = connection.cursor()
fake = Faker()

# --- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ ---
NUM_RECORDS = 1_000_000

# --- 1. –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Products ---
print("Inserting products...")

products = [
    (
        fake.word().capitalize(),
        fake.sentence(),
        round(random.uniform(5, 500), 2),
        random.randint(0, 1000),
        random.randint(1, 10)
    )
    for _ in range(NUM_RECORDS)
]

cursor.executemany(
    """
    INSERT INTO Products (name, description, price, stock_quantity, category_id)
    VALUES (%s, %s, %s, %s, %s)
    """,
    products
)

connection.commit()
print("‚úÖ Products inserted")

# --- 2. –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Customers ---
print("Inserting customers...")
customers = [
    (
        fake.first_name(),
        fake.last_name(),
        f"{fake.first_name().lower()}.{i}@example.com",  # —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π email —á–µ—Ä–µ–∑ i
        fake.phone_number(),
        fake.address(),
        fake.city()
    )
    for i in range(NUM_RECORDS)
]


cursor.executemany("""
    INSERT IGNORE INTO Customers (first_name, last_name, email, phone, address, city)
    VALUES (%s, %s, %s, %s, %s, %s)
""", customers)

connection.commit()
print("‚úÖ Customers inserted")

# --- 3. –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Orders ---
print("Inserting orders...")
cursor.execute("SELECT customer_id FROM Customers")
all_customer_ids = [row[0] for row in cursor.fetchall()]

orders = []
for _ in range(NUM_RECORDS):
    customer_id = random.choice(all_customer_ids)
    order_date = fake.date_time_between(start_date='-2y', end_date='now')
    total_amount = round(random.uniform(10, 1000), 2)
    payment_method = random.choice(['card', 'cash', 'apple_pay', 'google_pay'])
    orders.append((customer_id, order_date, total_amount, payment_method))

cursor.executemany("""
    INSERT INTO orders (customer_id, order_date, total_amount, payment_method)
    VALUES (%s, %s, %s, %s)
""", orders)
connection.commit()
print("‚úÖ Orders inserted")

cursor.close()
connection.close()
print("üéâ Done! 1,000,000 rows inserted into each table.")

-- Python code to insert data in new column in orders table.
	
import mysql.connector
import random

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
connection = mysql.connector.connect(
    host="localhost",
    user="root",
    password="!TTkachKSE2508!",
    database="homework_2"
)

cursor = connection.cursor()

# 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ product_id
cursor.execute("SELECT product_id FROM products")
product_ids = [row[0] for row in cursor.fetchall()]

# 2. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–º product_id
# –ü—Ä–∏–º—ñ—Ç–∫–∞: –¥–ª—è –º—ñ–ª—å–π–æ–Ω–∞ —Ä—è–¥–∫—ñ–≤ –Ω–µ —Ä–æ–±–∏–º–æ –æ–¥–∏–Ω UPDATE –Ω–∞ —Ä—è–¥–æ–∫ (–¥—É–∂–µ –ø–æ–≤—ñ–ª—å–Ω–æ)
# –†–æ–±–∏–º–æ –ø–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ 10000 —Ä—è–¥–∫—ñ–≤
batch_size = 10000
cursor.execute("SELECT order_id FROM orders")
order_ids = [row[0] for row in cursor.fetchall()]

for i in range(0, len(order_ids), batch_size):
    batch_orders = order_ids[i:i+batch_size]
    for order_id in batch_orders:
        product_id = random.choice(product_ids)
        cursor.execute(
            "UPDATE orders SET product_id = %s WHERE order_id = %s",
            (product_id, order_id)
        )
    connection.commit()
    print(f"Updated rows {i+1} to {i+len(batch_orders)}")

cursor.close()
connection.close()
print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ product_id –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏")


